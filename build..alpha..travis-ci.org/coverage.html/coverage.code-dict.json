{"/home/travis/build/npmtest/node-npmtest-acl/test.js":"/* istanbul instrument in package npmtest_acl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-acl/lib.npmtest_acl.js":"/* istanbul instrument in package npmtest_acl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_acl = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_acl = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-acl/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-acl && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_acl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_acl\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_acl.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_acl.rollup.js'] =\n            local.assetsDict['/assets.npmtest_acl.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_acl.__dirname +\n                    '/lib.npmtest_acl.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-acl/acl/index.js":"module.exports = require('./lib/acl.js');\nmodule.exports.__defineGetter__('redisBackend', function(){\n  return require('./lib/redis-backend.js');\n});\nmodule.exports.__defineGetter__('memoryBackend', function(){\n  return require('./lib/memory-backend.js');\n});\nmodule.exports.__defineGetter__('mongodbBackend', function(){\n  return require('./lib/mongodb-backend.js');\n});","/home/travis/build/npmtest/node-npmtest-acl/acl/lib/acl.js":"/**\n  ACL System inspired on Zend_ACL.\n\n  All functions accept strings, objects or arrays unless specified otherwise.\n\n  '*' is used to express 'all'\n\n  Database structure in Redis (using default prefix 'acl')\n\n  Users:\n\n  acl_roles_{userid} = set(roles)\n\n  Roles:\n\n  acl_roles = {roleNames} // Used to remove all the permissions associated to ONE resource.\n\n  acl_parents_{roleName} = set(parents)\n  acl_resources_{roleName} = set(resourceNames)\n\n  Permissions:\n\n  acl_allows_{resourceName}_{roleName} = set(permissions)\n\n  Note: user ids, role names and resource names are all case sensitive.\n\n  Roadmap:\n    - Add support for locking resources. If a user has roles that gives him permissions to lock\n      a resource, then he can get exclusive write operation on the locked resource.\n      This lock should expire if the resource has not been accessed in some time.\n*/\n\"use strict\";\n\nvar    _ = require('lodash'),\n    util = require('util'),\nbluebird = require('bluebird'),\ncontract = require('./contract');\n\ncontract.debug = true;\n\nvar Acl = function (backend, logger, options){\n  contract(arguments)\n    .params('object')\n    .params('object','object')\n    .params('object','object', 'object')\n    .end();\n\n  options = _.extend({\n    buckets: {\n      meta: 'meta',\n      parents: 'parents',\n      permissions: 'permissions',\n      resources: 'resources',\n      roles: 'roles',\n      users: 'users'\n    }\n  }, options);\n\n  this.logger = logger;\n  this.backend = backend;\n  this.options = options;\n\n  // Promisify async methods\n  backend.endAsync = bluebird.promisify(backend.end);\n  backend.getAsync = bluebird.promisify(backend.get);\n  backend.cleanAsync = bluebird.promisify(backend.clean);\n  backend.unionAsync = bluebird.promisify(backend.union);\n  if (backend.unions) {\n    backend.unionsAsync = bluebird.promisify(backend.unions);\n  }\n};\n\n/**\n  addUserRoles( userId, roles, function(err) )\n\n  Adds roles to a given user id.\n\n  @param {String|Number} User id.\n  @param {String|Array} Role(s) to add to the user id.\n  @param {Function} Callback called when finished.\n  @return {Promise} Promise resolved when finished\n*/\nAcl.prototype.addUserRoles = function(userId, roles, cb){\n  contract(arguments)\n    .params('string|number','string|array','function')\n    .params('string|number','string|array')\n    .end();\n\n  var transaction = this.backend.begin();\n  this.backend.add(transaction, this.options.buckets.meta, 'users', userId);\n  this.backend.add(transaction, this.options.buckets.users, userId, roles);\n\n  if (Array.isArray(roles)) {\n    var _this = this;\n\n      roles.forEach(function(role) {\n        _this.backend.add(transaction, _this.options.buckets.roles, role, userId);\n      });\n  }\n  else {\n      this.backend.add(transaction, this.options.buckets.roles, roles, userId);\n  }\n\n  return this.backend.endAsync(transaction).nodeify(cb);\n};\n\n/**\n  removeUserRoles( userId, roles, function(err) )\n\n  Remove roles from a given user.\n\n  @param {String|Number} User id.\n  @param {String|Array} Role(s) to remove to the user id.\n  @param {Function} Callback called when finished.\n  @return {Promise} Promise resolved when finished\n*/\nAcl.prototype.removeUserRoles = function(userId, roles, cb){\n  contract(arguments)\n    .params('string|number','string|array','function')\n    .params('string|number','string|array')\n    .end();\n\n  var transaction = this.backend.begin();\n  this.backend.remove(transaction, this.options.buckets.users, userId, roles);\n\n  if (Array.isArray(roles)) {\n    var _this = this;\n\n    roles.forEach(function(role) {\n      _this.backend.remove(transaction, _this.options.buckets.roles, role, userId);\n    });\n  }\n  else {\n    this.backend.remove(transaction, this.options.buckets.roles, roles, userId);\n  }\n\n  return this.backend.endAsync(transaction).nodeify(cb);\n};\n\n/**\n  userRoles( userId, function(err, roles) )\n\n  Return all the roles from a given user.\n\n  @param {String|Number} User id.\n  @param {Function} Callback called when finished.\n  @return {Promise} Promise resolved with an array of user roles\n*/\nAcl.prototype.userRoles = function(userId, cb){\n  return this.backend.getAsync(this.options.buckets.users, userId).nodeify(cb);\n};\n\n/**\n    roleUsers( roleName, function(err, users) )\n\n    Return all users who has a given role.\n    @param {String|Number} rolename.\n    @param {Function} Callback called when finished.\n    @return {Promise} Promise resolved with an array of users\n */\nAcl.prototype.roleUsers = function(roleName, cb){\n  return this.backend.getAsync(this.options.buckets.roles, roleName).nodeify(cb);\n};\n\n/**\n  hasRole( userId, rolename, function(err, is_in_role) )\n\n  Return boolean whether user is in the role\n\n  @param {String|Number} User id.\n  @param {String|Number} rolename.\n  @param {Function} Callback called when finished.\n  @return {Promise} Promise resolved with boolean of whether user is in role\n*/\nAcl.prototype.hasRole = function(userId, rolename, cb){\n  return this.userRoles(userId).then(function(roles){\n    return roles.indexOf(rolename) != -1;\n  }).nodeify(cb);\n};\n\n/**\n  addRoleParents( role, parents, function(err) )\n\n  Adds a parent or parent list to role.\n\n  @param {String} Child role.\n  @param {String|Array} Parent role(s) to be added.\n  @param {Function} Callback called when finished.\n  @return {Promise} Promise resolved when finished\n*/\nAcl.prototype.addRoleParents = function(role, parents, cb){\n  contract(arguments)\n    .params('string|number','string|array','function')\n    .params('string|number','string|array')\n    .end();\n\n  var transaction = this.backend.begin();\n  this.backend.add(transaction, this.options.buckets.meta, 'roles', role);\n  this.backend.add(transaction, this.options.buckets.parents, role, parents);\n  return this.backend.endAsync(transaction).nodeify(cb);\n};\n\n/**\n  removeRoleParents( role, parents, function(err) )\n\n  Removes a parent or parent list from role.\n\n  If `parents` is not specified, removes all parents.\n\n  @param {String} Child role.\n  @param {String|Array} Parent role(s) to be removed [optional].\n  @param {Function} Callback called when finished [optional].\n  @return {Promise} Promise resolved when finished.\n*/\nAcl.prototype.removeRoleParents = function(role, parents, cb){\n  contract(arguments)\n    .params('string', 'string|array', 'function')\n    .params('string', 'string|array')\n    .params('string', 'function')\n    .params('string')\n    .end();\n\n  if (!cb && _.isFunction(parents)) {\n    cb = parents;\n    parents = null;\n  }\n\n  var transaction = this.backend.begin();\n  if (parents) {\n    this.backend.remove(transaction, this.options.buckets.parents, role, parents);\n  } else {\n    this.backend.del(transaction, this.options.buckets.parents, role);\n  }\n  return this.backend.endAsync(transaction).nodeify(cb);\n};\n\n/**\n  removeRole( role, function(err) )\n\n  Removes a role from the system.\n\n  @param {String} Role to be removed\n  @param {Function} Callback called when finished.\n*/\nAcl.prototype.removeRole = function(role, cb){\n  contract(arguments)\n    .params('string','function')\n    .params('string').end();\n\n  var _this = this;\n  // Note that this is not fully transactional.\n  return this.backend.getAsync(this.options.buckets.resources, role).then(function(resources){\n    var transaction = _this.backend.begin();\n\n    resources.forEach(function(resource){\n      var bucket = allowsBucket(resource);\n      _this.backend.del(transaction, bucket, role);\n    });\n\n    _this.backend.del(transaction, _this.options.buckets.resources, role);\n    _this.backend.del(transaction, _this.options.buckets.parents, role);\n    _this.backend.del(transaction, _this.options.buckets.roles, role)\n    _this.backend.remove(transaction, _this.options.buckets.meta, 'roles', role);\n\n    // `users` collection keeps the removed role\n    // because we don't know what users have `role` assigned.\n    return _this.backend.endAsync(transaction);\n  }).nodeify(cb);\n};\n\n/**\n  removeResource( resource, function(err) )\n\n  Removes a resource from the system\n\n  @param {String} Resource to be removed\n  @param {Function} Callback called when finished.\n  @return {Promise} Promise resolved when finished\n*/\nAcl.prototype.removeResource = function(resource, cb){\n  contract(arguments)\n    .params('string', 'function')\n    .params('string')\n    .end();\n\n  var _this = this;\n  return this.backend.getAsync(this.options.buckets.meta, 'roles').then(function(roles){\n    var transaction = _this.backend.begin();\n    _this.backend.del(transaction, allowsBucket(resource), roles);\n    roles.forEach(function(role){\n      _this.backend.remove(transaction, _this.options.buckets.resources, role, resource);\n    })\n    return _this.backend.endAsync(transaction);\n  }).nodeify(cb)\n};\n\n/**\n  allow( roles, resources, permissions, function(err) )\n\n  Adds the given permissions to the given roles over the given resources.\n\n  @param {String|Array} role(s) to add permissions to.\n  @param {String|Array} resource(s) to add permisisons to.\n  @param {String|Array} permission(s) to add to the roles over the resources.\n  @param {Function} Callback called when finished.\n\n  allow( permissionsArray, function(err) )\n\n  @param {Array} Array with objects expressing what permissions to give.\n\n  [{roles:{String|Array}, allows:[{resources:{String|Array}, permissions:{String|Array}]]\n\n  @param {Function} Callback called when finished.\n  @return {Promise} Promise resolved when finished\n*/\nAcl.prototype.allow = function(roles, resources, permissions, cb){\n  contract(arguments)\n    .params('string|array','string|array','string|array','function')\n    .params('string|array','string|array','string|array')\n    .params('array','function')\n    .params('array')\n    .end();\n\n  if((arguments.length == 1) || ((arguments.length===2)&&_.isObject(roles)&&_.isFunction(resources))){\n    return this._allowEx(roles).nodeify(resources);\n  }else{\n    var _this = this;\n\n    roles = makeArray(roles);\n    resources = makeArray(resources);\n\n    var transaction = _this.backend.begin();\n\n    _this.backend.add(transaction, _this.options.buckets.meta, 'roles', roles);\n\n    resources.forEach(function(resource){\n      roles.forEach(function(role){\n        _this.backend.add(transaction, allowsBucket(resource), role, permissions);\n      });\n    });\n\n    roles.forEach(function(role){\n      _this.backend.add(transaction, _this.options.buckets.resources, role, resources);\n    });\n\n    return _this.backend.endAsync(transaction).nodeify(cb);\n  }\n};\n\n\nAcl.prototype.removeAllow = function(role, resources, permissions, cb){\n  contract(arguments)\n    .params('string','string|array','string|array','function')\n    .params('string','string|array','string|array')\n    .params('string','string|array','function')\n    .params('string','string|array')\n    .end();\n\n    resources = makeArray(resources);\n    if(cb || (permissions && !_.isFunction(permissions))){\n      permissions = makeArray(permissions);\n    }else {\n      cb = permissions;\n      permissions = null;\n    }\n\n  return this.removePermissions(role, resources, permissions, cb);\n}\n\n/**\n  removePermissions( role, resources, permissions)\n\n  Remove permissions from the given roles owned by the given role.\n\n  Note: we loose atomicity when removing empty role_resources.\n\n  @param {String}\n  @param {String|Array}\n  @param {String|Array}\n*/\nAcl.prototype.removePermissions = function(role, resources, permissions, cb){\n\n  var _this = this;\n\n  var transaction = _this.backend.begin();\n  resources.forEach(function(resource){\n    var bucket = allowsBucket(resource);\n    if(permissions){\n      _this.backend.remove(transaction, bucket, role, permissions);\n    }else{\n      _this.backend.del(transaction, bucket, role);\n      _this.backend.remove(transaction, _this.options.buckets.resources, role, resource);\n    }\n  });\n\n  // Remove resource from role if no rights for that role exists.\n  // Not fully atomic...\n  return _this.backend.endAsync(transaction).then(function(){\n    var transaction = _this.backend.begin();\n    return bluebird.all(resources.map(function(resource){\n      var bucket = allowsBucket(resource);\n      return _this.backend.getAsync(bucket, role).then(function(permissions){\n        if(permissions.length==0){\n          _this.backend.remove(transaction, _this.options.buckets.resources, role, resource);\n        }\n      });\n    })).then(function(){\n      return _this.backend.endAsync(transaction);\n    });\n  }).nodeify(cb);\n};\n\n/**\n  allowedPermissions( userId, resources, function(err, obj) )\n\n  Returns all the allowable permissions a given user have to\n  access the given resources.\n\n  It returns an array of objects where every object maps a\n  resource name to a list of permissions for that resource.\n\n  @param {String|Number} User id.\n  @param {String|Array} resource(s) to ask permissions for.\n  @param {Function} Callback called when finished.\n*/\nAcl.prototype.allowedPermissions = function(userId, resources, cb){\n  if (!userId)\n    return cb(null, {});\n\n  contract(arguments)\n    .params('string|number', 'string|array', 'function')\n    .params('string|number', 'string|array')\n    .end();\n\n  if (this.backend.unionsAsync) {\n    return this.optimizedAllowedPermissions(userId, resources, cb);\n  }\n\n  var _this = this;\n  resources = makeArray(resources);\n\n  return _this.userRoles(userId).then(function(roles){\n    var result = {};\n    return bluebird.all(resources.map(function(resource){\n      return _this._resourcePermissions(roles, resource).then(function(permissions){\n        result[resource] = permissions;\n      });\n    })).then(function(){\n      return result;\n    });\n  }).nodeify(cb);\n};\n\n/**\n  optimizedAllowedPermissions( userId, resources, function(err, obj) )\n\n  Returns all the allowable permissions a given user have to\n  access the given resources.\n\n  It returns a map of resource name to a list of permissions for that resource.\n\n  This is the same as allowedPermissions, it just takes advantage of the unions\n  function if available to reduce the number of backend queries.\n\n  @param {String|Number} User id.\n  @param {String|Array} resource(s) to ask permissions for.\n  @param {Function} Callback called when finished.\n*/\nAcl.prototype.optimizedAllowedPermissions = function(userId, resources, cb){\n  if (!userId) {\n    return cb(null, {});\n  }\n\n  contract(arguments)\n    .params('string|number', 'string|array', 'function|undefined')\n    .params('string|number', 'string|array')\n    .end();\n\n  resources = makeArray(resources);\n  var self = this;\n\n  return this._allUserRoles(userId).then(function(roles) {\n    var buckets = resources.map(allowsBucket);\n    if (roles.length === 0) {\n      var emptyResult = {};\n      buckets.forEach(function(bucket) {\n        emptyResult[bucket] = [];\n      });\n      return bluebird.resolve(emptyResult);\n    }\n\n    return self.backend.unionsAsync(buckets, roles);\n  }).then(function(response) {\n    var result = {};\n    Object.keys(response).forEach(function(bucket) {\n      result[keyFromAllowsBucket(bucket)] = response[bucket];\n    });\n\n    return result;\n  }).nodeify(cb);\n};\n\n/**\n  isAllowed( userId, resource, permissions, function(err, allowed) )\n\n  Checks if the given user is allowed to access the resource for the given\n  permissions (note: it must fulfill all the permissions).\n\n  @param {String|Number} User id.\n  @param {String|Array} resource(s) to ask permissions for.\n  @param {String|Array} asked permissions.\n  @param {Function} Callback called wish the result.\n*/\nAcl.prototype.isAllowed = function(userId, resource, permissions, cb){\n  contract(arguments)\n    .params('string|number', 'string', 'string|array', 'function')\n    .params('string|number', 'string', 'string|array')\n    .end();\n\n  var _this = this;\n\n  return this.backend.getAsync(this.options.buckets.users, userId).then(function(roles){\n    if(roles.length){\n      return _this.areAnyRolesAllowed(roles, resource, permissions);\n    }else{\n      return false;\n    }\n  }).nodeify(cb);\n};\n\n/**\n  areAnyRolesAllowed( roles, resource, permissions, function(err, allowed) )\n\n  Returns true if any of the given roles have the right permissions.\n\n  @param {String|Array} Role(s) to check the permissions for.\n  @param {String} resource(s) to ask permissions for.\n  @param {String|Array} asked permissions.\n  @param {Function} Callback called with the result.\n*/\nAcl.prototype.areAnyRolesAllowed = function(roles, resource, permissions, cb){\n  contract(arguments)\n    .params('string|array', 'string', 'string|array', 'function')\n    .params('string|array', 'string', 'string|array')\n    .end();\n\n  roles = makeArray(roles);\n  permissions = makeArray(permissions);\n\n  if(roles.length===0){\n    return bluebird.resolve(false).nodeify(cb);\n  }else{\n    return this._checkPermissions(roles, resource, permissions).nodeify(cb);\n  }\n};\n\n/**\n  whatResources(role, function(err, {resourceName: [permissions]})\n\n  Returns what resources a given role or roles have permissions over.\n\n  whatResources(role, permissions, function(err, resources) )\n\n  Returns what resources a role has the given permissions over.\n\n  @param {String|Array} Roles\n  @param {String[Array} Permissions\n  @param {Function} Callback called wish the result.\n*/\nAcl.prototype.whatResources = function(roles, permissions, cb){\n  contract(arguments)\n    .params('string|array')\n    .params('string|array','string|array')\n    .params('string|array','function')\n    .params('string|array','string|array','function')\n    .end();\n\n  roles = makeArray(roles);\n  if (_.isFunction(permissions)){\n    cb = permissions;\n    permissions = undefined;\n  }else if(permissions){\n    permissions = makeArray(permissions);\n  }\n\n  return this.permittedResources(roles, permissions, cb);\n};\n\nAcl.prototype.permittedResources = function(roles, permissions, cb){\n  var _this = this;\n  var result = _.isUndefined(permissions) ? {} : [];\n  return this._rolesResources(roles).then(function(resources){\n    return bluebird.all(resources.map(function(resource){\n      return _this._resourcePermissions(roles, resource).then(function(p){\n        if(permissions){\n          var commonPermissions = _.intersection(permissions, p);\n          if(commonPermissions.length>0){\n            result.push(resource);\n          }\n        }else{\n          result[resource] = p;\n        }\n      });\n    })).then(function(){\n      return result;\n    });\n  }).nodeify(cb);\n}\n\n/**\n  clean ()\n\n  Cleans all the keys with the given prefix from redis.\n\n  Note: this operation is not reversible!.\n*/\n/*\nAcl.prototype.clean = function(callback){\n  var acl = this;\n  this.redis.keys(this.prefix+'*', function(err, keys){\n    if(keys.length){\n      acl.redis.del(keys, function(err){\n        callback(err);\n      });\n    }else{\n      callback();\n    }\n  });\n};\n*/\n\n/**\n  Express Middleware\n\n*/\nAcl.prototype.middleware = function(numPathComponents, userId, actions){\n  contract(arguments)\n    .params()\n    .params('number')\n    .params('number','string|number|function')\n    .params('number','string|number|function', 'string|array')\n    .end();\n\n  var acl = this;\n\n  function HttpError(errorCode, msg){\n    this.errorCode = errorCode;\n    this.message = msg;\n    this.name = this.constructor.name;\n\n    Error.captureStackTrace(this, this.constructor);\n    this.constructor.prototype.__proto__ = Error.prototype;\n  }\n\n  return function(req, res, next){\n    var _userId = userId,\n        _actions = actions,\n        resource,\n        url;\n\n    // call function to fetch userId\n    if(typeof userId === 'function'){\n      _userId = userId(req, res);\n    }\n    if (!userId) {\n      if((req.session) && (req.session.userId)){\n        _userId = req.session.userId;\n      }else if((req.user) && (req.user.id)){\n        _userId = req.user.id;\n      }else{\n        next(new HttpError(401, 'User not authenticated'));\n        return;\n      }\n    }\n\n    // Issue #80 - Additional check\n    if (!_userId) {\n      next(new HttpError(401, 'User not authenticated'));\n      return;\n    }\n\n    url = req.originalUrl.split('?')[0];\n    if(!numPathComponents){\n      resource = url;\n    }else{\n      resource = url.split('/').slice(0,numPathComponents+1).join('/');\n    }\n\n    if(!_actions){\n      _actions = req.method.toLowerCase();\n    }\n\n    acl.logger?acl.logger.debug('Requesting '+_actions+' on '+resource+' by user '+_userId):null;\n\n    acl.isAllowed(_userId, resource, _actions, function(err, allowed){\n      if (err){\n        next(new Error('Error checking permissions to access resource'));\n      }else if(allowed === false){\n        if (acl.logger) {\n          acl.logger.debug('Not allowed '+_actions+' on '+resource+' by user '+_userId);\n          acl.allowedPermissions(_userId, resource, function(err, obj){\n            acl.logger.debug('Allowed permissions: '+util.inspect(obj));\n          });\n        }\n        next(new HttpError(403,'Insufficient permissions to access resource'));\n      }else{\n        acl.logger?acl.logger.debug('Allowed '+_actions+' on '+resource+' by user '+_userId):null;\n        next();\n      }\n    });\n  };\n};\n\n/**\n  Error handler for the Express middleware\n\n  @param {String} [contentType] (html|json) defaults to plain text\n*/\nAcl.prototype.middleware.errorHandler = function(contentType){\n  var method = 'end';\n\n  if(contentType){\n    switch (contentType) {\n      case 'json': method = 'json'; break;\n      case 'html': method = 'send'; break;\n    }\n  }\n\n  return function(err, req, res, next){\n    if(err.name !== 'HttpError' || !err.errorCode) return next(err);\n    res.status(err.errorCode)[method](err.message);\n  };\n};\n\n\n//-----------------------------------------------------------------------------\n//\n// Private methods\n//\n//-----------------------------------------------------------------------------\n\n//\n// Same as allow but accepts a more compact input.\n//\nAcl.prototype._allowEx = function(objs){\n  var _this = this;\n  objs = makeArray(objs);\n\n  var demuxed = [];\n  objs.forEach(function(obj){\n    var roles = obj.roles;\n    obj.allows.forEach(function(allow){\n      demuxed.push({\n        roles:roles,\n        resources:allow.resources,\n        permissions:allow.permissions});\n    });\n  });\n\n  return bluebird.reduce(demuxed, function(values, obj){\n    return _this.allow(obj.roles, obj.resources, obj.permissions);\n  }, null);\n};\n\n//\n// Returns the parents of the given roles\n//\nAcl.prototype._rolesParents = function(roles){\n  return this.backend.unionAsync(this.options.buckets.parents, roles);\n};\n\n//\n// Return all roles in the hierarchy including the given roles.\n//\n/*\nAcl.prototype._allRoles = function(roleNames, cb){\n  var _this = this, roles;\n\n  _this._rolesParents(roleNames, function(err, parents){\n    roles = _.union(roleNames, parents);\n    async.whilst(\n      function (){\n        return parents.length >0;\n      },\n      function (cb) {\n        _this._rolesParents(parents, function(err, result){\n          if(!err){\n            roles = _.union(roles, parents);\n            parents = result;\n          }\n          cb(err);\n        });\n      },\n      function(err){\n        cb(err, roles);\n      }\n    );\n  });\n};\n*/\n//\n// Return all roles in the hierarchy including the given roles.\n//\nAcl.prototype._allRoles = function(roleNames){\n  var _this = this;\n\n  return this._rolesParents(roleNames).then(function(parents){\n    if(parents.length > 0){\n      return _this._allRoles(parents).then(function(parentRoles){\n        return _.union(roleNames, parentRoles);\n      });\n    }else{\n      return roleNames;\n    }\n  });\n};\n\n//\n// Return all roles in the hierarchy of the given user.\n//\nAcl.prototype._allUserRoles = function(userId) {\n  var _this = this;\n\n  return this.userRoles(userId).then(function(roles) {\n    if (roles && roles.length > 0) {\n      return _this._allRoles(roles);\n    } else {\n      return [];\n    }\n  });\n};\n\n//\n// Returns an array with resources for the given roles.\n//\nAcl.prototype._rolesResources = function(roles){\n  var _this = this;\n  roles = makeArray(roles);\n\n  return this._allRoles(roles).then(function(allRoles){\n    var result = [];\n\n    // check if bluebird.map simplifies this code\n    return bluebird.all(allRoles.map(function(role){\n      return _this.backend.getAsync(_this.options.buckets.resources, role).then(function(resources){\n        result = result.concat(resources);\n      });\n    })).then(function(){\n      return result;\n    });\n  });\n};\n\n//\n// Returns the permissions for the given resource and set of roles\n//\nAcl.prototype._resourcePermissions = function(roles, resource){\n  var _this = this;\n\n  if(roles.length===0){\n    return bluebird.resolve([]);\n  }else{\n    return this.backend.unionAsync(allowsBucket(resource), roles).then(function(resourcePermissions){\n      return _this._rolesParents(roles).then(function(parents){\n        if(parents && parents.length){\n          return _this._resourcePermissions(parents, resource).then(function(morePermissions){\n            return _.union(resourcePermissions, morePermissions);\n          });\n        }else{\n          return resourcePermissions;\n        }\n      });\n    });\n  }\n};\n\n//\n// NOTE: This function will not handle circular dependencies and result in a crash.\n//\nAcl.prototype._checkPermissions = function(roles, resource, permissions){\n  var _this = this;\n\n  return this.backend.unionAsync(allowsBucket(resource), roles).then(function(resourcePermissions){\n    if (resourcePermissions.indexOf('*') !== -1){\n      return true;\n    }else{\n      permissions = permissions.filter(function(p){\n        return resourcePermissions.indexOf(p) === -1;\n      });\n\n      if(permissions.length === 0){\n        return true;\n      }else{\n        return _this.backend.unionAsync(_this.options.buckets.parents, roles).then(function(parents){\n          if(parents && parents.length){\n            return _this._checkPermissions(parents, resource, permissions);\n          }else{\n            return false;\n          }\n        });\n      }\n    }\n  });\n};\n\n//-----------------------------------------------------------------------------\n//\n// Helpers\n//\n//-----------------------------------------------------------------------------\n\nfunction makeArray(arr){\n  return Array.isArray(arr) ? arr : [arr];\n}\n\nfunction allowsBucket(role){\n  return 'allows_'+role;\n}\n\nfunction keyFromAllowsBucket(str) {\n  return str.replace(/^allows_/, '');\n}\n\n\n// -----------------------------------------------------------------------------------\n\n\nexports = module.exports = Acl;\n","/home/travis/build/npmtest/node-npmtest-acl/acl/lib/contract.js":"/**\n  Design by Contract module (c) OptimalBits 2011.\n\n  Roadmap:\n    - Optional parameters. ['(string)', 'array']\n    - Variable number of parameters.['number','...']\n\n  api?:\n  \n  contract(arguments)\n    .params('string', 'array', '...')\n    .params('number')\n    .end()\n  \n*/\n\"use strict\";\n\nvar noop = {};\nvar util = require('util');\nvar _ = require('lodash');\n\nnoop.params = function(){\n  return this;\n};\nnoop.end = function(){};\n\nvar contract = function(args){\n  if(contract.debug===true){\n    contract.fulfilled = false;\n    contract.args = _.toArray(args);\n    contract.checkedParams = [];\n    return contract;\n  }else{\n    return noop;\n  }\n};\n\ncontract.params = function(){\n  var i, len;\n  this.fulfilled |= checkParams(this.args, _.toArray(arguments));\n  if(this.fulfilled){\n    return noop;\n  }else{\n    this.checkedParams.push(arguments);\n    return this;\n  }\n}\ncontract.end = function(){\n  if(!this.fulfilled){\n    printParamsError(this.args, this.checkedParams);\n    throw new Error('Broke parameter contract');\n  }\n}\n\nvar typeOf = function(obj){\n  return Array.isArray(obj) ? 'array':typeof obj;\n};\n\nvar checkParams = function(args, contract){\n  var fulfilled, types, type, i, j;\n  \n  if(args.length !== contract.length){\n    return false;\n  }else{\n    for(i=0; i<args.length; i++){\n      try{\n        types = contract[i].split('|');\n      }catch(e){\n        console.log(e, args)\n      }\n      \n      type = typeOf(args[i]);\n      fulfilled = false;\n      for(j=0; j<types.length; j++){\n        if (type === types[j]){\n          fulfilled = true;\n          break;\n        }\n      }\n      if(fulfilled===false){\n        return false;\n      }\n    }\n    return true;\n  }\n};\n\nvar printParamsError = function(args, checkedParams){\n  var msg = 'Parameter mismatch.\\nInput:\\n( ',\n      type,\n      input,\n      i;\n  _.each(args, function(input, key){\n    type = typeOf(input);\n    if(key != 0){\n      msg += ', '\n    }\n    msg += input + ': '+type;\n  })\n\n  msg += ')\\nAccepted:\\n';\n  \n  for (i=0; i<checkedParams.length;i++){\n    msg += '('+ argsToString(checkedParams[i]) + ')\\n';\n  }\n\n  console.log(msg);\n};\n\nvar argsToString = function(args){\n  var res = \"\";\n  _.each(args, function(arg, key){\n    if(key != 0){\n      res += ', ';\n    }\n    res += arg;\n  })\n  return res;\n}\n\nexports = module.exports = contract;\n\n"}